(defpackage :est
  (:use :cl :utils))
(defun est (fn larger? bigger smaller &optional (guess 1))
  (let ((r (funcall fn guess)))
    (cond ((funcall larger? r) (est fn larger? bigger smaller (funcall bigger guess)))
	  ((not (funcall larger? r)) (est fn larger? bigger smaller (funcall smaller guess)))
	  (t guess))))
(defun est-num (fn larger?)
  (est fn
       Larger?
       (lambda (g) (* g (1+ (random 1.0))))
       (lambda (g) (* g (random 1.0)))
       1))
(defun final (str)
  (aref str (1- (length str))))
(defun zero (str)
  (char str 0))
(let ((count 0)
      (acc nil))
  (est #'identity #'(lambda (x) 
			    (incf count)
			    (push x acc)
			    (if (< 1000 count) (error "~A x: ~A" acc x))
			    (handler-case (code-char x)
			      (type-error nil nil)))
       #'(lambda (x) (ceiling (* x (+ (/ 3 2) (random 1.0)))))
       #'(lambda (x) (ceiling (* x (random 1.0))))) 1000.0)
